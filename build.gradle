// Plugins
plugins {
    id "de.carne.java-tools" version "0.5.2" apply false
    id "org.sonarqube" version "2.5" apply false
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

// Projects
subprojects {

	apply plugin: "java"
	apply plugin: "de.carne.java-tools"
	apply plugin: "jacoco"
	apply plugin: "org.sonarqube"
	apply plugin: "eclipse"
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
		jcenter()
		maven { url "https://oss.jfrog.org/libs-release/" }
		if(snapshotBuild) {
			maven { url "https://oss.jfrog.org/libs-snapshot/" }
		}
	}

	sourceSets {
		main {
			java {
				srcDir "../filescanner-gtk-linux-x86_64/shared-src/main/java"
			}
			resources {
				srcDir "../filescanner-gtk-linux-x86_64/shared-src/main/resources"
			}
		}
		test {
			java {
				srcDir "../filescanner-gtk-linux-x86_64/shared-src/test/java"
			}
		}
	}

	def buildPlatform = project.name.substring(rootProject.name.length())

	dependencies {
		compile("de.carne.common:java-default:5-SNAPSHOT")
		compile("de.carne.common:java-swt${buildPlatform}:2-SNAPSHOT")
		compile("de.carne.common:java-compression:3-SNAPSHOT")
		compile("org.apache.lucene:lucene-analyzers-common:7.0.0")
		compile("org.apache.lucene:lucene-queryparser:7.0.0") {
			exclude module: "lucene-sandbox"
		}
		testCompile("junit:junit:4.12")
	}
	
	javatools {
		generateI18N {
			enabled = true
			genDir = file("../filescanner-gtk-linux-x86_64/shared-src/main/java")
			bundles = fileTree("../filescanner-gtk-linux-x86_64/shared-src/main/resources").include("**/*I18N.properties")
		}
	}

	jar {
		manifest {
			attributes(
				"Main-Class": "de.carne.Application",
				"X-Application-Name": "FileScanner",
				"X-Application-Version": project.version,
				"X-Application-Build": "???"
			)
		}
		from configurations.runtime.collect {
			it.name.matches("(java-default-.*.jar)|(java-swt-.*.jar)") ? zipTree(it).matching { exclude "META-INF/**" } : it
		}
	}

	jacoco {
		toolVersion = "0.7.9"
	}
		
	jacocoTestReport {
		reports {
			xml.enabled false
			html.enabled true
			html.destination file("${buildDir}/reports/jacocoHtml")
			csv.enabled false
		}
	}

	eclipse {
		classpath {
			defaultOutputDir = file("eclipse-build")
		}
	}
}
