// Plugins
plugins {
	id "de.carne.java-tools" version "0.6.3" apply false
	id "org.sonarqube" version "2.6.2" apply false
	id "com.install4j.gradle" version "7.0.5" apply false
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

// Projects
subprojects {

	apply plugin: "java"
	apply plugin: "de.carne.java-tools"
	apply plugin: "jacoco"
	apply plugin: "org.sonarqube"
	apply plugin: 'distribution'
	apply plugin: 'com.install4j.gradle'
	apply plugin: "eclipse"
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
		if(snapshotBuild) {
			mavenLocal()
			maven { url "https://oss.jfrog.org/libs-snapshot/" }
		}
		jcenter()
		maven { url "https://oss.jfrog.org/libs-release/" }
	}

	def sharedSrcDir = "../filescanner-gtk-linux-x86_64/shared-src"

	sourceSets {
		main {
			java {
				srcDir "${sharedSrcDir}/main/java"
			}
			resources {
				srcDir "${sharedSrcDir}/main/resources"
			}
		}
		test {
			java {
				srcDir "${sharedSrcDir}/test/java"
			}
		}
	}

	def platformSuffix = project.name.substring(rootProject.name.length())

	dependencies {
		compile("de.carne.common:java-boot:2.4.0")
		compile("de.carne.common:java-default:8.5.1")
		compile("de.carne.common:java-swt${platformSuffix}:2.1.0")
		compile("de.carne.common:filescanner-engine:2.1.0-SNAPSHOT")
		compile("org.glassfish.grizzly:grizzly-http-server:2.4.3")
		compile("org.apache.lucene:lucene-analyzers-common:7.4.0")
		compile("org.apache.lucene:lucene-queryparser:7.4.0") {
			exclude module: "lucene-sandbox"
		}
		testCompile("de.carne.common:java-test-swt${platformSuffix}:2.1.0")
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
		testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.2.0")
	}
	
	test {
		useJUnitPlatform()
		// SWT display can only be created once per VM
		forkEvery = 1
		testLogging {
			events "failed"
			exceptionFormat "full"
		}
	}
	
	javatools {
		generateI18N {
			enabled = true
			genDir = file("../filescanner-gtk-linux-x86_64/shared-src/main/java")
			bundles = fileTree("../filescanner-gtk-linux-x86_64/shared-src/main/resources").include("**/*I18N.properties")
		}
	}

	jar {
		def buildTimestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

		manifest {
			attributes(
				"X-Application-Name": "FileScanner",
				"X-Application-Version": project.version,
				"X-Application-Build": buildTimestamp
			)
		}
	}
	
	task bootJar(type: Jar) {
		appendix = 'boot'
		entryCompression = ZipEntryCompression.STORED
		from jar
		from configurations.runtime.collect {
			it.name.matches('java-boot-.*.jar') ? zipTree(it) : it
		}
		manifest {
			attributes(
				'Main-Class': 'de.carne.boot.Application',
			)
		}
	}

	distributions {
		main {
			contents {
				from bootJar
			}
		}
	}
	
	tasks.withType(Tar){
		compression = Compression.GZIP
		extension = 'tar.gz'
	}

	install4j {
		installDir = file(project.hasProperty("install4jHome") ? install4jHome : ".")
	}
	
	task assembleMedia(type: com.install4j.gradle.Install4jTask, dependsOn: assembleDist) {
		def i4jProjectApplicationID = project.getProperty(project.name + '.i4jProjectApplicationID')
		def i4jProjectMediaID = project.getProperty(project.name + '.i4jProjectMediaID')
		
		enabled = i4jProjectApplicationID != 'false'

		projectFile = file("../src/main/install4j/filescanner.install4j")
		variables = [
			i4jProjectBaseName: rootProject.name,
			i4jProjectName: project.name,
			i4jProjectVersion: version,
			i4jProjectBaseDir: projectDir,
			i4jProjectBuildDir: buildDir,
			i4jProjectApplicationID: i4jProjectApplicationID,
		]
		buildIds = [
			i4jProjectMediaID
			]
		quiet = true		
	}

	jacoco {
		toolVersion = "0.8.1"
	}
		
	jacocoTestReport {
		reports {
			xml.enabled false
			html.enabled true
			html.destination file("${buildDir}/reports/jacoco")
			csv.enabled false
		}
	}

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
		}
	}
}
