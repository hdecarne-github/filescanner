// Plugins
plugins {
	id "de.carne.java-tools" version "0.8.2" apply false
	id "org.sonarqube" version "2.8" apply false
	id "com.install4j.gradle" version "8.0.4" apply false
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

apply plugin: "de.carne.java-tools"

javatools {
	githubRelease {
		enabled = true
		releaseAssets = fileTree(".") {
			include("**/filescanner-cocoa-macosx-x86_64_macos_*.dmg")
			include("**/filescanner-gtk-linux-x86_64-*.tar.gz")
			include("**/filescanner-win32-win32-x86_64_windows-x64_*.exe")
		}
		overwrite = true
		githubToken = project.findProperty('githubToken')
		ignoreDirty = true
	}
}

subprojects.each { draftGitHubRelease.dependsOn("${it.name}:assembleMedia") }

// Projects
subprojects {

	apply plugin: "java"
	apply plugin: "de.carne.java-tools"
	apply plugin: "jacoco"
	apply plugin: "org.sonarqube"
	apply plugin: "distribution"
	apply plugin: "com.install4j.gradle"
	apply plugin: "eclipse"
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
		if(snapshotBuild) {
			mavenLocal()
			maven { url "https://oss.jfrog.org/libs-snapshot/" }
		}
		jcenter()
		maven { url "https://oss.jfrog.org/libs-release/" }
	}

	def sharedSrcDir = "../filescanner-gtk-linux-x86_64/shared-src"

	sourceSets {
		main {
			java {
				srcDir "${sharedSrcDir}/main/java"
			}
			resources {
				srcDir "${sharedSrcDir}/main/resources"
			}
		}
		test {
			java {
				srcDir "${sharedSrcDir}/test/java"
			}
		}
	}

	javatools {
		generateI18N {
			enabled = true
			genDir = file("${sharedSrcDir}/main/java")
			bundles = fileTree("${sharedSrcDir}/main/resources").include("**/*I18N.properties")
			lineSeparator = "\n"
		}
	}

	def platformSuffix = project.name.substring(rootProject.name.length())

	dependencies {
		compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
		testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
		implementation(group: "de.carne.common", name: "java-swt${platformSuffix}", version: project.javaSwtVersion)
		implementation(group: "de.carne.common", name: "filescanner-engine", version: project.filescannerEngineVersion)
		implementation(group: "org.glassfish.grizzly", name: "grizzly-http-server", version: project.glassfishGrizzlyVersion)
		implementation(group: "org.apache.lucene", name: "lucene-analyzers-common", version: project.luceneVersion)
		implementation(group: "org.apache.lucene", name: "lucene-queryparser", version: project.luceneVersion) {
			exclude(group: "org.apache.lucene", module: "lucene-sandbox")
		}
		testImplementation(group: "de.carne.common", name: "java-test-swt${platformSuffix}", version: project.javaSwtVersion)
	}

	test {
		useJUnitPlatform()
		// SWT display can only be created once per VM
		forkEvery = 1
		testLogging {
			events "started", "failed", "passed", "skipped"
			exceptionFormat "full"
		}
		jvmArgs "-javaagent:${classpath.find { it.name.contains('jmockit') }.absolutePath}"
		enabled = project.name.endsWith(javatools.platform.swtToolkit)
	}

	project.tasks["sonarqube"].enabled = test.enabled

	jar {
		manifest {
			attributes(
				'Automatic-Module-Name': automaticModuleName,
				'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
				'Build-Jdk' : System.properties['java.version'],
				'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
				'X-Compile-Target-JDK': targetCompatibility,
				'X-Compile-Source-JDK': sourceCompatibility,
				'X-Module-Id': project.name,
				'X-Module-Name': "FileScanner",
				'X-Module-Version': project.version,
				'X-Module-DocURL': projectUrl,
				'X-Module-License': projectLicenseUrl
			)
		}
	}
	
	task bootJar(type: Jar) {
		appendix = "boot"
		entryCompression = ZipEntryCompression.STORED
		from jar
		from configurations.runtimeClasspath.collect {
			it.name.matches("java-boot-.*.jar") ? zipTree(it) : it
		}
		manifest {
			attributes(
				'Main-Class': "de.carne.boot.Application"
			)
		}
	}

	distributions {
		main {
			contents {
				from bootJar
			}
		}
	}
	
	tasks.withType(Tar){
		compression = Compression.GZIP
		archiveExtension = "tar.gz"
	}

	install4j {
		installDir = file(project.hasProperty("install4jHome") ? install4jHome : ".")
	}
	
	task assembleMedia(type: com.install4j.gradle.Install4jTask, dependsOn: assembleDist) {
		def i4jProjectApplicationID = project.getProperty(project.name + ".i4jProjectApplicationID")
		def i4jProjectMediaID = project.getProperty(project.name + ".i4jProjectMediaID")
		
		enabled = i4jProjectApplicationID != "false"

		projectFile = file("../src/main/install4j/filescanner.install4j")
		variables = [
			i4jProjectBaseName: rootProject.name,
			i4jProjectName: project.name,
			i4jProjectVersion: version,
			i4jProjectBaseDir: projectDir,
			i4jProjectBuildDir: buildDir,
			i4jProjectSigningDir: file(project.hasProperty("install4jSigningHome") ? install4jSigningHome : "."),
			i4jProjectApplicationID: i4jProjectApplicationID
		]
		buildIds = [
			i4jProjectMediaID
			]
		if(project.hasProperty("install4jSigningPassword")) {
			disableSigning = false
			macKeystorePassword = install4jSigningPassword
		} else {
			disableSigning = true
		}
		quiet = true
	}

	jacoco {
		toolVersion = "0.8.5"
	}
		
	jacocoTestReport {
		reports {
			xml.enabled true
			xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
			html.enabled false
			csv.enabled false
		}
	}
	test.finalizedBy jacocoTestReport
	
	sonarqube {
		properties {
			property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
		}
	}

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
			file {
				whenMerged {
					def eeaPath = project.findProperty("eclipse.eeaPath");
					 
					entries.forEach {
						if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						} else if(it.path.contains("/caches/modules-2/")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						}
					}
				}
			}
		}
	}
}
